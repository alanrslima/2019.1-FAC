.data

	add_output: .asciiz "ADD: "
	sub_output: .asciiz "\nSUB: "
	and_output: .asciiz "\nAND: "
	or_output: .asciiz "\nOR: "
	xor_output: .asciiz "\nXOR: "
	sll_output: .asciiz "\nSLL(3): "
	srl_output: .asciiz "\nSRL(1): "
	jump_line: .asciiz "\n"
	error: .asciiz "\nNúmeros maiores ou iguais a 255 não sao suportados!\nExecução encerrada!"

.text

main:
	
  # Leitura de inputs
	li $v0,5 # Leitura de um valor inteiro de input
	syscall
 	move $s0, $v0 # Salva o primeiro input do usuario em $s0
	slti $t1, $s0, 255  # Condicional, retorna True se $t0 < 255 e False se $t0 > 255
	beq $t2, $t1, exit_error #Se t2 for False, sai do programa

	li $v0,5 # Leitura de um valor inteiro de input
	syscall
  	move $s1, $v0 # Salva o segundo input do usuario em $s1
	slti $t1, $s1, 255  # Condicional, retorna True se $t0 < 255 e False se $t0 > 255
	beq $t2, $t1, exit_error #Se t2 for False, sai do programa
	
	# Realização das operacoes
  	jal add_func # ADD
  	jal sub_func # SUB
  	jal and_func # ADD
	jal or_func # OR
  	jal xor_func # XOR
  	jal sll_func # SLL
	jal srl_func # SRL

	j exit # Saida do programa


add_func: 
  	add $t0, $s0, $s1 # first_number + second_number = X 
  	la $a0, add_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
  	jr $ra


sub_func:
 	sub $t0, $s0, $s1 # first_number - second_number = X
  	la $a0, sub_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
  	jr $ra


and_func:
  	and $t0, $s0, $s1 # Bitwise first_number . second_number = X
  	la $a0, and_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
  	jr $ra


or_func:
  	or $t0, $s0, $s1 # Bitwise first_number + second_number = X
  	la $a0, or_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
 	jr $ra


xor_func:
	xor $t0, $s0, $s1 # Bitwise (first_number and ~second_number) = X
  	la $a0, xor_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
 	jr $ra


sll_func:
  	sll $t0, $s0, 3 # Desloca 3 bits para esquerda em first_number
  	la $a0, sll_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
  	jr $ra


srl_func:
  	srl $t0, $s1, 1 # Desloca 1 bit para direita em second_number
  	la $a0, srl_output
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 1 #Chamada de sistema para print de valor
	move $a0, $t0
	syscall
  	jr $ra


exit:
	la $a0, jump_line
	li $v0, 4 #Chamada de sistema para print de string
	syscall
	li $v0, 10 # exit
	syscall	
	

exit_error:
	li $v0, 4 # Chamada de sistema para print de string
	la $a0, error # Printa na tela a mensagem de erro
	syscall
	li $v0, 10 # Saida
	syscall
	
